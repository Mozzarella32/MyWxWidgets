# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest, archlinux]
        build_type: [Release, Debug]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
          - os: archlinux
            c_compiler: gcc
            cpp_compiler: g++
          - os: archlinux
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl
          - os: archlinux
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 1

    # - name: Restore file mtimes from git (cross-platform)
    #   shell: bash
    #   if: runner.os != 'Windows'
    #   run: |
    #     while read -r file; do
    #       if [ -f "$file" ]; then
    #         mtime=$(git log -1 --format="%at" -- "$file")
    #         touch -d "@$mtime" "$file"
    #       fi
    #     done < <(git ls-files)

    # - name: Restore file mtimes from git (Windows)
    #   shell: pwsh
    #   if: runner.os == 'Windows'
    #   run: |
    #     git ls-files | ForEach-Object {
    #       $file = $_
    #       if (Test-Path $file) {
    #         $timestamp = git log -1 --format="%at" -- $file
    #         if ($timestamp) {
    #           $date = [System.DateTimeOffset]::FromUnixTimeSeconds([int]$timestamp).DateTime
    #           (Get-Item $file).LastWriteTime = $date
    #         }
    #       }
    #     }
        
    - name: Set up sccache
      uses: mozilla-actions/sccache-action@v0.0.9
      env:
        SCCACHE_GHA_ENABLED: "true"
              
    # - name: Cache build
    #   uses: actions/cache@v4
    #   with:
    #     path: build
    #     key: cmake-${{ matrix.os }}-${{ matrix.c_compiler }}-${{ matrix.build_type }}-${{ hashFiles('**/CMakeLists.txt') }}
    #     restore-keys: |
    #       cmake-${{ matrix.os }}-${{ matrix.c_compiler }}-${{ matrix.build_type }}

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Install GTK3(Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: sudo apt-get update && sudo apt-get install -y libgtk-3-dev libglu1-mesa-dev build-essential

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_CXX_COMPILER_LAUNCHER="sccache"
        -DCMAKE_C_COMPILER_LAUNCHER="sccache"
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

         
    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}
      
    # - name: Save build
    #   uses: actions/cache/save@v4
    #   with:
    #     path: build
    #     key: build-${{ matrix.os }}-${{ matrix.c_compiler }}-${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}
